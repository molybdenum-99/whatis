---
http_interactions:
- request:
    method: get
    uri: https://en.wikipedia.org/w/api.php?action=query&clcategories=Category:All%20disambiguation%20pages&clprop=hidden&exsentences=1&format=json&generator=search&gsrlimit=3&gsrsearch=Foobar&inprop=url&piprop=original&prop=revisions%7Cinfo%7Ccoordinates%7Ccategories%7Cextracts%7Cpageimages%7Cpageterms&redirects=true&rvprop=content%7Ctimestamp
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Infoboxer/0.3.1.pre (https://github.com/molybdenum-99/infoboxer; zverok.offline@gmail.com)
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 02 Dec 2017 11:18:42 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - mw1231.eqiad.wmnet
      X-Powered-By:
      - HHVM/3.18.6-dev
      X-Content-Type-Options:
      - nosniff
      Cache-Control:
      - private, must-revalidate, max-age=0
      P3p:
      - CP="This is not a P3P policy! See https://en.wikipedia.org/wiki/Special:CentralAutoLogin/P3P
        for more info."
      X-Frame-Options:
      - SAMEORIGIN
      Content-Disposition:
      - inline; filename="api-result.json"
      Vary:
      - Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization
      Backend-Timing:
      - D=201233 t=1512213522621944
      X-Varnish:
      - 19466594, 53102221, 552200387
      Via:
      - 1.1 varnish-v4, 1.1 varnish-v4, 1.1 varnish-v4
      Accept-Ranges:
      - bytes
      Age:
      - '0'
      X-Cache:
      - cp1068 pass, cp3043 pass, cp3031 pass
      X-Cache-Status:
      - pass
      Strict-Transport-Security:
      - max-age=106384710; includeSubDomains; preload
      Set-Cookie:
      - GeoIP=UA:::50.45:30.52:v4; Path=/; secure; Domain=.wikipedia.org
      - WMF-Last-Access-Global=02-Dec-2017;Path=/;Domain=.wikipedia.org;HttpOnly;secure;Expires=Wed,
        03 Jan 2018 00:00:00 GMT
      - WMF-Last-Access=02-Dec-2017;Path=/;HttpOnly;secure;Expires=Wed, 03 Jan 2018
        00:00:00 GMT
      X-Analytics:
      - ns=-1;special=Badtitle;https=1;nocookies=1
      X-Client-Ip:
      - 94.179.21.124
    body:
      encoding: ASCII-8BIT
      string: '{"continue":{"excontinue":1,"continue":"||revisions|info|coordinates|categories|pageimages|pageterms"},"warnings":{"extracts":{"*":"\"exlimit\"
        was too large for a whole article extracts request, lowered to 1."}},"query":{"pages":{"11178":{"pageid":11178,"ns":0,"title":"Foobar","index":1,"revisions":[{"timestamp":"2017-12-01T01:37:06Z","contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{Distinguish|FUBAR}}\n{{Redirect|Foo|other
        uses|Foo (disambiguation)}}\nThe terms ''''''foobar'''''' ({{IPAc-en|\u02c8|f|u\u02d0|b|\u0251r}}),
        or ''''''foo'''''' and others are used as [[placeholder name]]s (also referred
        to as [[metasyntactic variable]]s) in [[computer programming]] or computer-related
        documentation.<ref name=\"rfc3092\">{{cite web|last1=Eastlake|first1=D|last2=Manros|first2=C|last3=Raymond|first3=E|title=Etymology
        of \"Foo\"|url=http://www.ietf.org/rfc/rfc3092.txt|website=The Internet Engineering
        Task Force|accessdate=17 April 2016}}</ref> They have been used to name entities
        such as [[Variable (computer science)|variable]]s, [[Function (computer science)|functions]],
        and [[command (computing)|command]]s whose exact identity is unimportant and
        serve only to demonstrate a concept.\n\n== History and etymology ==\n[[File:Smokeycover.jpg|thumb|upright|[[Smokey
        Stover]]<!-- no italics, character\u2019s name --> driving a \"foomobile\"]]\nThe
        etymology of ''''foo'''' is obscure. Its use in connection with ''''bar''''
        is generally traced to the World War II [[military slang]] [[List of military
        slang terms#FUBAR|FUBAR]], later [[bowdlerised]] to ''''foobar''''.<ref name=\":0\">{{Cite
        web|url=http://www.dictionary.com/browse/foo|title=the definition of foo|website=Dictionary.com|access-date=2016-05-09}}</ref>
        The word ''''foo'''' on its own was used earlier. Between about 1930 and 1952
        it appeared in the comic ''''[[Smokey Stover]]'''' by [[Bill Holman (cartoonist)|Bill
        Holman]], who stated that he used the word due to having seen it on the bottom
        of a jade Chinese figurine in [[Chinatown, San Francisco]], purportedly signifying
        \"good luck\".<ref>{{Cite web|url=http://www.smokey-stover.com/history.html|title=The
        History of Bill Holman|website=www.smokey-stover.com|access-date=2016-04-17}}</ref>
        This may be related to the Chinese word ''''fu'''' (\"\u798f\", sometimes
        transliterated ''''foo''''), which can mean ''''happiness'''' or ''''blessing''''.<ref
        name=\":0\" />\n\nThe first known use of the terms in print in a programming
        context appears in a 1965 edition of MIT''s ''''[[Tech Engineering News]]''''.<ref>{{cite
        book|url=https://books.google.com/books?id=aOQRAQAAMAAJ&q=foobar&dq=foobar&source=bl&ots=vuAhTreOhj&sig=Xk-_9ZRIXoyQ_F_gvvDflYKzXwI&hl=en&sa=X&ei=jUEkUI_ZDoPY2QWrjoHACA&ved=0CDoQ6AEwAQ|title=Tech
        Engineering News, Volume 47|year=1965|publisher=[[Massachusetts Institute
        of Technology]]|page=63|quote=Further, it is possible to search for an effective
        address; e.g., if an instruction such as \"add 1 foo\" were used, specifying
        indirect addressing thru location \"foo\", and location \"foo\" contained
        the address of location \"foobar\", than an effective word search for \"foobar\"
        would find location \"foo\" and the location containing the \"add\" instruction
        as well.}}</ref> ''''Foobar'''' may have come about as a result of the pre-existing
        \"Foo\" being conjoined with \"bar\" an addition borrowed from the military''s
        FUBAR. The use of ''''foo'''' in a programming context is generally credited
        to the [[Tech Model Railroad Club]] (TMRC) of [[Massachusetts Institute of
        Technology|MIT]] from circa 1960.<ref name=\"rfc3092\" /> In the complex model
        system, there were [[scram]] switches located at numerous places around the
        room that could be thrown if something undesirable was about to occur, such
        as a train going full-bore at an obstruction. Another feature of the system
        was a digital clock on the dispatch board. When someone hit a scram switch,
        the clock stopped and the display was replaced with the word \"FOO\"; at TMRC
        the scram switches are, therefore, called \"Foo switches\". Because of this,
        an entry in the 1959 ''''Dictionary of the TMRC Language'''' went something
        like this: \"FOO: The first syllable of the misquoted sacred chant phrase
        ''[[Om mani padme hum|foo mane padme hum]].'' Our first obligation is to keep
        the foo counters turning.\"<ref>{{cite web|url=http://www.computer-dictionary-online.org/?q=foo|title=Computer
        Dictionary Online}}, computer-dictionary-online.org</ref> One book{{which|date=November
        2010}} describing the MIT train room describes two buttons by the door: labeled
        \"foo\" and \"bar\". These were general purpose buttons and were often re-purposed
        for whatever fun idea the MIT hackers had at the time, hence the adoption
        of foo and bar as general purpose variable names. An entry in the ''''Abridged
        Dictionary of the TMRC Language'''' states:<ref>{{cite web|url=http://tmrc.mit.edu/dictionary.html|title=Abridged
        Dictionary of the TMRC Language|publisher=[[MIT]]}}</ref>\n\n{{Quote|text
        = Multiflush: stop-all-trains-button. Next best thing to the red door button.
        Also called FOO. Displays \"FOO\" on the clock when used.}}\n\nThe term ''''foobar''''
        was propagated through computer science circles in the 1960s and early 1970s
        by system manuals from [[Digital Equipment Corporation]].{{citation needed|date=May
        2009}} ''''Foobar'''' was also used as a variable name in the [[Fortran]]
        code of ''''[[Colossal Cave Adventure]]'''' (1977 Crowther and Woods version).
        The variable FOOBAR was used to contain the player''s progress in saying the
        magic phrase \"Fee Fie Foe Foo\".\n\n==Example use in code==\nIn this [[Hello
        World]] code sample, foo and bar are used to illustrate string concatenation:\n\n<syntaxhighlight
        lang=\"c\">\n/* C code */\n\n#include <stdio.h>\n\nint main() {\n   const
        char *foo = \"Hello\";\n   const char *bar = \"World!\";\n   fprintf(stdout,
        \"%s %s\\n\", foo, bar);\n\n   return 0;\n}\n\n</syntaxhighlight>\n\n==Examples
        in language==\n* [[Foo Camp]] is an annual [[hacker convention]].\n* [[BarCamp]],
        an international network of user generated conferences\n* During the ''''[[United
        States v. Microsoft Corp.]]'''' trial, some evidence was presented that Microsoft
        had tried to use the [[Web Services Interoperability]] organization as a means
        to stifle competition, including e-mails in which top executives including
        [[Bill Gates]] referred to the WS-I using the codename \"foo\".<ref>[http://www.news.com/Microsoft-ploy-to-block-Sun-exposed/2100-1001_3-912906.html
        Microsoft ploy to block Sun exposed], news.com</ref>\n* [[foobar2000]] is
        an audio player.\n* Google uses a web tool called foo.bar to recruit new employees.<ref>{{Cite
        web|url=http://www.ibtimes.co.uk/google-foobar-how-searching-web-earned-software-graduate-job-google-1517284|title=Google
        Foobar: How searching the web earned a software graduate a job at Google|date=2015-08-27|website=International
        Business Times UK|access-date=2016-05-09}}</ref>\n* [[Foo Fighters]] is an
        American rock band named after the [[foo fighter]]s, [[unidentified flying
        object]]s reported by [[World War II]] pilots.\n* [[Stanley Black & Decker]]
        has registered the [[trademark]] ''''fubar'''', used as branding for a type
        of [[Crowbar (tool)|crowbar]].<ref>{{Cite web|url=https://tmdb.eu/trademark/005379284/eu|title=Trademark
        FUBAR registered by Stanley Black & Decker, Inc. at OHIM|last=tmdb.eu|website=tmdb.eu|access-date=2016-05-10}}</ref>\n\n==
        See also ==\n{{Portal|Computer programming}}\n* [[xyzzy (computing)|xyzzy]]\n*
        [[:Category:Variable (computer science)]]\n{{Clear}}\n\n== References ==\n{{Reflist}}\n\n==
        External links ==\n{{wiktionary|foobar|foo|bar}}\n* [http://www.catb.org/jargon/html/F/foo.html
        The Jargon File entry on \"foobar\"], catb.org\n* RFC 1639 \u2013 FTP Operation
        Over Big Address Records (FOOBAR)\n\n[[Category:Placeholder names]]\n[[Category:Computer
        programming folklore]]"}],"contentmodel":"wikitext","pagelanguage":"en","pagelanguagehtmlcode":"en","pagelanguagedir":"ltr","touched":"2017-12-01T01:37:06Z","lastrevid":812985628,"length":7286,"fullurl":"https://en.wikipedia.org/wiki/Foobar","editurl":"https://en.wikipedia.org/w/index.php?title=Foobar&action=edit","canonicalurl":"https://en.wikipedia.org/wiki/Foobar","extract":"<p>The
        terms <b>foobar</b> (<span></span>), or <b>foo</b> and others are used as
        placeholder names (also referred to as metasyntactic variables) in computer
        programming or computer-related documentation.","terms":{"description":["use
        of metasyntactic variables in computer programming"],"label":["foobar"],"alias":["foo","bar","baz","qux","quux"]}},"269946":{"pageid":269946,"ns":0,"title":"Foobar2000","index":2,"revisions":[{"timestamp":"2017-11-20T14:37:27Z","contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{lowercase
        title}}\n{{Infobox software\n| name = foobar2000\n| logo = Foobar2000 logo
        2014.png\n| screenshot = Foobar2000 v1.3.12 on Windows 10, with LibriVox audio
        books in playlist, simple playlist view.png\n| caption = foobar2000 v1.3.12
        on Windows 10\n| developer = Peter Paw\u0142owski and contributors<ref>{{cite
        web|title=License|url=https://www.foobar2000.org/license|website=foobar2000|accessdate=24
        June 2016}}</ref>\n| released = {{start date and age|2002|12|20}}<ref>{{cite
        web|url=http://www.hydrogenaud.io/forums/index.php?showtopic=4997 |title=Official
        foobar2000 site & foobar2000 0.3 & SDK! |publisher=Hydrogenaudio |date= |accessdate=2013-08-28}}</ref>\n|
        operating system = ; Win32 : [[Windows XP SP2]] and later<ref>{{cite web|url=http://www.foobar2000.org/download
        |title=Download foobar2000 and optional components |publisher=Foobar2000.org
        |date= |accessdate=2013-08-28}}</ref>\n; [[Universal Windows Platform|UWP]]
        : [[Windows 10]] and later<ref name=\"foobar2000-mobile\">{{cite web|url=http://mobile.foobar2000.com|title=Foobar2000
        Mobile|publisher=Foobar2000.com |date= |accessdate=2016-05-07}}</ref>\n; [[iOS]]
        : [[iOS 8]] and later<ref name=\"foobar2000-mobile\"/>\n; [[Android (operating
        system)|Android]] : [[Android 2.3]] and later<ref name=\"foobar2000-mobile\"/>\n|
        genre = [[Comparison of audio player software|Audio player]]\n| license =
        Core: [[Freeware]]<br />SDK: [[BSD licenses|BSD]] (3 clause)\n| website =
        {{URL|https://www.foobar2000.org/}}\n}}\n\n''''''foobar2000''''''{{efn|The
        name [[foobar]] is derived from a common [[metasyntactic variable|placeholder]]
        name used in computer programming.}} is a [[freeware]] [[Audio player (software)|audio
        player]] for [[Microsoft Windows]], [[iOS]] and [[Android (operating system)|Android]]
        developed by Peter Paw\u0142owski. It is known for its highly [[Modular programming|modular
        design]], breadth of features, and extensive user flexibility in configuration.
        For example, the user-interface is completely customizable.<ref name=abi>{{cite
        web|title=foobar2000 v0.9.6.9 Review|url=http://anythingbutipod.com/2009/11/foobar2000-v0969-review/|accessdate=29
        June 2012|deadurl=yes|archiveurl=https://web.archive.org/web/20120708074724/http://anythingbutipod.com/2009/11/foobar2000-v0969-review/|archivedate=8
        July 2012|df=}}</ref> Its extensive [[software development kit]] (SDK) allows
        [[Third-party software component|third-party]] developers enough power to
        completely replace the [[Graphical user interface|interface]]. foobar2000
        supports a large number of [[audio file format]]s, has many features for organising
        [[metadata]], files, and folders, and has a [[Transcoding|converter]] interface
        for use with [[Command-line interface|command line]] encoders. To maximize
        audio fidelity in cases where [[resampling (audio)|resampling]] or downscaling
        in [[audio bit depth|bit depth]] is required, it provides [[noise shaping]]
        and [[dither]]ing. There are a number of official and third-party [[Plug-in
        (computing)|component]]s which add many additional features. The core is [[closed
        source]], whereas the [[Software development kit|SDK]] is licensed under the
        [[BSD license#3-clause_license_.28.22BSD_License_2.0.22.2C_.22Revised_BSD_License.22.2C_.22New_BSD_License.22.2C_or_.22Modified_BSD_License.22.29|Three-Clause
        BSD license]].\n\nSince version 0.9.5, foobar2000 supports [[Windows XP]]
        SP2/SP3 and later releases only. This version features a revamped default
        interface, with embedded support for album list, [[album art]],<ref name=cnet>{{cite
        web|title=Foobar2000 CNET Editors'' review|url=http://download.cnet.com/Foobar2000/3000-2139_4-10235595.html|accessdate=29
        June 2012}}</ref> [[Spectrogram|spectrum visualization]], and some other features
        and improvements.\n\nIn September 2011,<ref>{{cite web|url=http://www.foobar2000.org/?page=News|title=Foobar2000''s
        News page : 2011-09-20 |accessdate=2012-09-10}}</ref> the developer of foobar2000
        spun off its [[codebase]] to create a simplified audio player called \"Boom\".<ref>{{cite
        web|url=http://perkele.cc/software/boom |title=Peter Pawlowski''s home page
        : Software : Boom |accessdate=2011-10-03}}</ref>\n\nIn April 2016, a mobile
        version was released as a preview<ref>{{Cite web|url=https://hydrogenaud.io/index.php/topic,111806.html|title=Foobar2000
        (Mobile Edition)|website=hydrogenaud.io|access-date=2016-05-07}}</ref> for
        Windows 10 devices,<ref>{{Cite web|url=https://www.microsoft.com/en-us/store/apps/foobar2000-beta/9nblggh5x8tr|title=foobar2000
        beta \u2013 Windows Apps on Microsoft Store|website=Microsoft Store|access-date=2016-05-07}}</ref>
        followed in May by a version for iOS and Android devices.<ref>{{Cite web|url=https://itunes.apple.com/us/app/foobar2000/id1072807669|title=foobar2000
        on the App Store|website=App Store|access-date=2016-05-07}}</ref><ref>{{Cite
        web|url=https://play.google.com/store/apps/details?id=com.foobar2000.foobar2000|title=foobar2000
        \u2013 Android Apps on Google Play|website=play.google.com|access-date=2016-05-10}}</ref>\n\n==
        Features ==\n\n=== Core ===\nAt its core, Foobar2000 natively supports a range
        of audio formats, including [[MP1]], [[MPEG-1 Audio Layer II|MP2]], [[MP3]],
        [[Musepack|MPC]], [[Advanced Audio Coding|AAC]], [[Windows Media Audio|WMA]],
        [[Ogg Vorbis]], [[FLAC]] / [[Ogg]] FLAC, [[Apple Lossless Audio Codec|ALAC]],
        [[WavPack]], [[WAV]], [[Audio Interchange File Format|AIFF]], [[Au file format|AU]],
        [[SND (file)|SND]], [[Red Book (audio CD standard)|CD]], [[Speex]], and [[Opus
        (audio format)|Opus]].\n\nFoobar2000 also has a customizable user interface,
        advanced [[Tag editor|tagging]] capabilities and support for [[ripping]] [[Red
        Book (CD standard)|Audio CDs]], as well as [[transcoding]] of all supported
        audio formats using the Converter component. The player can read inside [[ZIP
        (file format)|ZIP]], [[GZIP]], [[7z (file format)|7z]] and [[RAR (file format)|RAR]]
        [[Archive format|archives]].\n\nAdditional features include [[ReplayGain]]
        support (for both playback and calculation),<ref>{{cite web|url=http://wiki.hydrogenaud.io/index.php?title=ReplayGain|title=Hydrogenaudio
        wiki: ReplayGain|accessdate=2012-06-25}}</ref><ref>{{cite web|url=http://joncairns.com/2010/10/foobar2000-4-3-replaygain/|title=foobar2000:
        4.3 Replaygain|accessdate=2012-06-25}}</ref> [[gapless playback]],<ref>{{cite
        web|url=http://wiki.hydrogenaud.io/index.php?title=Gapless_playback|title=Hydrogenaudio
        wiki: Gapless playback|accessdate=2012-06-25}}</ref> keyboard shortcuts and
        support for [[Digital signal processing|DSP]] effects such as [[Equalization
        (audio)|equalization]] and [[Fade (audio engineering)|crossfade]].\n\nUsers
        can configure the Foobar2000 Media Library with automated folder watching<ref>{{cite
        web|url=http://www.foobar2000.org/?page=ReleaseNotes&version=096 |title=foobar2000
        0.9.6 release notes |accessdate=2009-06-09}}</ref> and Windows Media streaming.<ref>{{cite
        web|url=http://www.foobar2000.org/?page=ReleaseNotes&version=10 |title=foobar2000
        1.0 release notes |accessdate=2010-09-04}}</ref> The client is built with
        an open component architecture, allowing third-party developers to extend
        functionality of the player.<ref>{{cite web |url=http://www.maximumpc.com/how-to-manage-your-music-the-power-user-way-with-foobar/
        |title=foobar2000 |accessdate=2017-05-29 |deadurl=yes |archiveurl=https://web.archive.org/web/20160324050445/http://www.maximumpc.com/how-to-manage-your-music-the-power-user-way-with-foobar/
        |archivedate=2016-03-24}}</ref>\n\n=== Optional ===\n\nFoobar2000 can read
        the [[Monkey''s Audio|APE]], [[High Definition Compatible Digital|HDCD]],
        [[Dolby AC-3|AC3]], [[DTS (sound system)|DTS]], [[Super Audio CD|SACD]] and
        [[DVD-Audio]] formats.\n\nOther optional features include playback statistics,
        [[CD burning]], [[kernel streaming]], [[Audio Stream Input/Output|ASIO]] support
        and [[WASAPI]] output compatibility. Third-party support is also present in
        the audio client. For instance, Foobar2000 supports [[Scrobbling#Audioscrobbler
        plugin|Last.fm scrobbling]] and integration with [[iPod|Apple iPod]], including
        album art support and automatic transcoding of audio formats not supported
        by iPod itself.\n\nFoobar2000 is the recommended player for Windows 7 by [[Cambridge
        Audio]]<ref>{{cite web |url=http://www.cambridgeaudio.com/assets/documents/Windows_7_ASIO_setup.pdf
        |title=Windows 7 ASIO USB audio set-up guide |accessdate=2012-06-25 |deadurl=yes
        |archiveurl=https://web.archive.org/web/20120417090940/http://www.cambridgeaudio.com/assets/documents/Windows_7_ASIO_setup.pdf
        |archivedate=2012-04-17 |df= }}</ref> and supports virtual radio stream playback.\n\n==
        See also ==\n\n* [[Comparison of audio player software]]\n\n== Notes ==\n{{notelist}}\n\n==
        References ==\n{{Reflist|30em}}\n\n== External links ==\n{{Commons category}}\n*
        {{Official website}}\n* {{freenode|foobar2000}} on [[freenode]] \u2013 Discussion
        and support\n*{{cite web|url=http://www.maximumpc.com/how-to-manage-your-music-the-power-user-way-with-foobar/
        |title=How-To: Manage Your Music the Power User Way with Foobar|accessdate=June
        24, 2016 |deadurl=yes |archive-url=https://web.archive.org/web/20160324050445/http://www.maximumpc.com/how-to-manage-your-music-the-power-user-way-with-foobar/|archivedate=24
        March 2016 }}\n\n{{Media player (application software)}}\n\n[[Category:2002
        software]]\n[[Category:Windows media players]]\n[[Category:Windows-only freeware]]\n[[Category:Tag
        editors]]"}],"contentmodel":"wikitext","pagelanguage":"en","pagelanguagehtmlcode":"en","pagelanguagedir":"ltr","touched":"2017-11-26T08:27:43Z","lastrevid":811262082,"length":9342,"fullurl":"https://en.wikipedia.org/wiki/Foobar2000","editurl":"https://en.wikipedia.org/w/index.php?title=Foobar2000&action=edit","canonicalurl":"https://en.wikipedia.org/wiki/Foobar2000","original":{"source":"https://upload.wikimedia.org/wikipedia/commons/4/4f/Foobar2000_v1.3.12_on_Windows_10%2C_with_LibriVox_audio_books_in_playlist%2C_simple_playlist_view.png","width":810,"height":490},"terms":{"alias":["foobar","f2k","foobar2k","fb2k","foobar
        2000"],"description":["freeware audio player"],"label":["foobar2000"]}},"7983939":{"pageid":7983939,"ns":0,"title":"Substitution
        failure is not an error","index":3,"revisions":[{"timestamp":"2017-11-08T23:40:12Z","contentformat":"text/x-wiki","contentmodel":"wikitext","*":"''''''Substitution
        failure is not an error'''''' (''''''SFINAE'''''') refers to a situation in
        [[C++]] where an invalid substitution of [[template (programming)|template]]
        parameters is not in itself an error.  David Vandevoorde first introduced
        the acronym SFINAE to describe related programming techniques.<ref>{{cite
        book | last=Vandevoorde | first=David |author2=Nicolai M. Josuttis  | title=C++
        Templates: The Complete Guide | publisher=Addison-Wesley Professional | year=2002
        | isbn=0-201-73484-2}}</ref>\n\nSpecifically, when creating a candidate set
        for [[overload resolution]], some (or all) candidates of that set may be the
        result of instantiated templates with (potentially deduced) template arguments
        substituted for the corresponding template parameters. If an error occurs
        during the substitution of a set of arguments for any given template, the
        compiler removes the potential overload from the candidate set instead of
        stopping with a compilation error, provided the substitution error is one
        the C++ standard grants such treatment.<ref>International Organization for
        Standardization. \"ISO/IEC 14882:2003, Programming languages &mdash; C++\",
        \u00a7 14.8.2.</ref> If one or more candidates remain and overload resolution
        succeeds, the invocation is well-formed.\n\n==Example==\nThe following example
        illustrates a basic instance of SFINAE:\n\n<source lang=\"cpp\">\nstruct Test
        {\n    typedef int foo;\n};\n\ntemplate <typename T> \nvoid f(typename T::foo)
        {} // Definition #1\n\ntemplate <typename T> \nvoid f(T) {}               //
        Definition #2\n\nint main() {\n    f<Test>(10); // Call #1.\n    f<int>(10);  //
        Call #2. Without error (even though there is no int::foo) thanks to SFINAE.\n}\n</source>\n\nHere,
        attempting to use a non-class type in a qualified name (<code>T::foo</code>)
        results in a deduction failure for <code>f<int></code> because <code>int</code>
        has no nested type named <code>foo</code>, but the program is well-formed
        because a valid function remains in the set of candidate functions.\n\nAlthough
        SFINAE was initially introduced to avoid creating ill-formed programs when
        unrelated template declarations were visible (e.g., through the inclusion
        of a header file), many developers later found the behavior useful for compile-time
        introspection. Specifically, it allows a template to determine certain properties
        of its template arguments at instantiation time.\n\nFor example, SFINAE can
        be used to determine if a type contains a certain typedef:\n\n<source lang=\"cpp\">\n#include
        <iostream>\n\ntemplate <typename T>\nstruct has_typedef_foobar {\n    // Types
        \"yes\" and \"no\" are guaranteed to have different sizes,\n    // specifically
        sizeof(yes) == 1 and sizeof(no) == 2.\n    typedef char yes[1];\n    typedef
        char no[2];\n\n    template <typename C>\n    static yes& test(typename C::foobar*);\n\n    template
        <typename>\n    static no& test(...);\n\n    // If the \"sizeof\" of the result
        of calling test<T>(nullptr) is equal to sizeof(yes),\n    // the first overload
        worked and T has a nested type named foobar.\n    static const bool value
        = sizeof(test<T>(nullptr)) == sizeof(yes);\n};\n\nstruct foo {    \n    typedef
        float foobar;\n};\n\nint main() {\n    std::cout << std::boolalpha;\n    std::cout
        << has_typedef_foobar<int>::value << std::endl;\n    std::cout << has_typedef_foobar<foo>::value
        << std::endl;\n}\n</source>\n\nWhen <code>T</code> has the nested type <code>foobar</code>
        defined, the instantiation of the first <code>test</code> works and the null
        pointer constant is successfully passed. (And the resulting type of the expression
        is <code>yes</code>.) If it does not work, the only available function is
        the second <code>test</code>, and the resulting type of the expression is
        <code>no</code>. (An ellipsis is used not only because it will accept any
        argument, but also because its conversion rank is lowest, so a call to the
        first function will be preferred if it is possible; this removes ambiguity.)\n\nIn
        C++11, the above code could be simplified to:\n\n<source lang=\"cpp\">\n#include
        <iostream>\n#include <type_traits>\n\ntemplate <typename... Ts> using void_t
        = void;\n\ntemplate <typename T, typename = void>\nstruct has_typedef_foobar
        : std::false_type {};\n\ntemplate <typename T>\nstruct has_typedef_foobar<T,
        void_t<typename T::foobar>> : std::true_type {};\n\nstruct foo {\n  using
        foobar = float;\n};\n\nint main() {\n  std::cout << std::boolalpha;\n  std::cout
        << has_typedef_foobar<int>::value << std::endl;\n  std::cout << has_typedef_foobar<foo>::value
        << std::endl;\n}\n</source>\n\nWith the standardisation of the detection idiom
        in the [http://en.cppreference.com/w/cpp/experimental/lib_extensions_2 Library
        fundamental v2 (n4562)] proposal, the above code could be re-written as follows:\n<source
        lang=\"cpp\">\n#include <iostream>\n#include <type_traits>\n\ntemplate <typename
        T>\nusing has_typedef_foobar_t = decltype(T::foobar);\n\nstruct foo {\n  using
        foobar = float;\n};\n\nint main() {\n  std::cout << std::boolalpha;\n  std::cout
        << std::is_detected<has_typedef_foobar_t, int>::value << std::endl;\n  std::cout
        << std::is_detected<has_typedef_foobar_t, foo>::value << std::endl;\n}\n</source>
        \n\nThe developers of [[Boost C++ Libraries|Boost]] used SFINAE in boost::enable_if<ref
        name=\"enable_if\">[http://www.boost.org/doc/libs/release/libs/utility/enable_if.html
        Boost Enable If]</ref> and in other ways.\n\n==References==\n{{reflist}}\n\n{{use
        dmy dates|date=January 2012}}\n[[Category:C++]]\n[[Category:Articles with
        example C++ code]]"}],"contentmodel":"wikitext","pagelanguage":"en","pagelanguagehtmlcode":"en","pagelanguagedir":"ltr","touched":"2017-11-08T23:40:12Z","lastrevid":809417218,"length":5403,"fullurl":"https://en.wikipedia.org/wiki/Substitution_failure_is_not_an_error","editurl":"https://en.wikipedia.org/w/index.php?title=Substitution_failure_is_not_an_error&action=edit","canonicalurl":"https://en.wikipedia.org/wiki/Substitution_failure_is_not_an_error","terms":{"label":["Substitution
        failure is not an error"]}}}}}'
    http_version: 
  recorded_at: Sat, 02 Dec 2017 11:18:42 GMT
recorded_with: VCR 3.0.3
